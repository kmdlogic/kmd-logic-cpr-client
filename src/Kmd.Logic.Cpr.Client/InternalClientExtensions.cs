// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Cpr.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InternalClient.
    /// </summary>
    internal static partial class InternalClientExtensions
    {
            /// <summary>
            /// Gets citizen data by CPR
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// Personal identification number of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetByCpr(this IInternalClient operations, System.Guid subscriptionId, string cpr, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetByCprAsync(subscriptionId, cpr, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets citizen data by CPR
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// Personal identification number of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByCprAsync(this IInternalClient operations, System.Guid subscriptionId, string cpr, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCprWithHttpMessagesAsync(subscriptionId, cpr, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets detailed citizen data by CPR
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// Personal identification number of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetCprDetailsByCpr(this IInternalClient operations, System.Guid subscriptionId, string cpr, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetCprDetailsByCprAsync(subscriptionId, cpr, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets detailed citizen data by CPR
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// Personal identification number of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCprDetailsByCprAsync(this IInternalClient operations, System.Guid subscriptionId, string cpr, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCprDetailsByCprWithHttpMessagesAsync(subscriptionId, cpr, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets citizen data by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// ID of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetById(this IInternalClient operations, System.Guid subscriptionId, System.Guid id, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetByIdAsync(subscriptionId, id, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets citizen data by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// ID of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByIdAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid id, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(subscriptionId, id, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets detailed citizen data by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// ID of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetCprDetailsById(this IInternalClient operations, System.Guid subscriptionId, System.Guid id, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetCprDetailsByIdAsync(subscriptionId, id, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets detailed citizen data by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// ID of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCprDetailsByIdAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid id, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCprDetailsByIdWithHttpMessagesAsync(subscriptionId, id, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets citizen events for the nominated period
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='dateFrom'>
            /// Query events from this date and time
            /// </param>
            /// <param name='dateTo'>
            /// Query events to this date and time
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='pageNo'>
            /// The page number to query
            /// </param>
            /// <param name='pageSize'>
            /// The maximum number of results to return
            /// </param>
            public static object GetEvents(this IInternalClient operations, System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?))
            {
                return operations.GetEventsAsync(subscriptionId, dateFrom, dateTo, configurationId, pageNo, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets citizen events for the nominated period
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='dateFrom'>
            /// Query events from this date and time
            /// </param>
            /// <param name='dateTo'>
            /// Query events to this date and time
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='pageNo'>
            /// The page number to query
            /// </param>
            /// <param name='pageSize'>
            /// The maximum number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEventsAsync(this IInternalClient operations, System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsWithHttpMessagesAsync(subscriptionId, dateFrom, dateTo, configurationId, pageNo, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets subscribed citizen events for the nominated period
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='dateFrom'>
            /// Query events from this date and time
            /// </param>
            /// <param name='dateTo'>
            /// Query events to this date and time
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='pageNo'>
            /// The page number to query
            /// </param>
            /// <param name='pageSize'>
            /// The maximum number of results to return
            /// </param>
            public static object GetSubscribedEvents(this IInternalClient operations, System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?))
            {
                return operations.GetSubscribedEventsAsync(subscriptionId, dateFrom, dateTo, configurationId, pageNo, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets subscribed citizen events for the nominated period
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='dateFrom'>
            /// Query events from this date and time
            /// </param>
            /// <param name='dateTo'>
            /// Query events to this date and time
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='pageNo'>
            /// The page number to query
            /// </param>
            /// <param name='pageSize'>
            /// The maximum number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscribedEventsAsync(this IInternalClient operations, System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscribedEventsWithHttpMessagesAsync(subscriptionId, dateFrom, dateTo, configurationId, pageNo, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves Cpr configuration assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            public static CprProviderConfigurationModel GetCprConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId)
            {
                return operations.GetCprConfigurationAsync(subscriptionId, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves Cpr configuration assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CprProviderConfigurationModel> GetCprConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCprConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Cpr configurations assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<CprProviderConfigurationModel> GetAllCprConfigurations(this IInternalClient operations, System.Guid subscriptionId)
            {
                return operations.GetAllCprConfigurationsAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Cpr configurations assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CprProviderConfigurationModel>> GetAllCprConfigurationsAsync(this IInternalClient operations, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllCprConfigurationsWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribes for CPR events by CPR number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// CPR Number
            /// </param>
            /// <param name='request'>
            /// CPR Subscription Request
            /// </param>
            public static object SubscribeByCpr(this IInternalClient operations, System.Guid subscriptionId, string cpr, CprSubscriptionRequest request = default(CprSubscriptionRequest))
            {
                return operations.SubscribeByCprAsync(subscriptionId, cpr, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribes for CPR events by CPR number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// CPR Number
            /// </param>
            /// <param name='request'>
            /// CPR Subscription Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SubscribeByCprAsync(this IInternalClient operations, System.Guid subscriptionId, string cpr, CprSubscriptionRequest request = default(CprSubscriptionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscribeByCprWithHttpMessagesAsync(subscriptionId, cpr, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribes for CPR events by PersonId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// CPR Person ID
            /// </param>
            /// <param name='request'>
            /// CPR Subscription Request
            /// </param>
            public static object SubscribeById(this IInternalClient operations, System.Guid subscriptionId, System.Guid id, CprSubscriptionRequest request = default(CprSubscriptionRequest))
            {
                return operations.SubscribeByIdAsync(subscriptionId, id, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribes for CPR events by PersonId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// CPR Person ID
            /// </param>
            /// <param name='request'>
            /// CPR Subscription Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SubscribeByIdAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid id, CprSubscriptionRequest request = default(CprSubscriptionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscribeByIdWithHttpMessagesAsync(subscriptionId, id, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unsubscribes for CPR events by CPR number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// CPR Number
            /// </param>
            /// <param name='configurationId'>
            /// CPR Configuration ID
            /// </param>
            public static IDictionary<string, string> UnsubscribeByCpr(this IInternalClient operations, System.Guid subscriptionId, string cpr, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.UnsubscribeByCprAsync(subscriptionId, cpr, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribes for CPR events by CPR number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// CPR Number
            /// </param>
            /// <param name='configurationId'>
            /// CPR Configuration ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> UnsubscribeByCprAsync(this IInternalClient operations, System.Guid subscriptionId, string cpr, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnsubscribeByCprWithHttpMessagesAsync(subscriptionId, cpr, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unsubscribes for CPR events by PersonId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// CPR Person ID
            /// </param>
            /// <param name='configurationId'>
            /// CPR Configuration ID
            /// </param>
            public static IDictionary<string, string> UnsubscribeById(this IInternalClient operations, System.Guid subscriptionId, System.Guid id, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.UnsubscribeByIdAsync(subscriptionId, id, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribes for CPR events by PersonId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// CPR Person ID
            /// </param>
            /// <param name='configurationId'>
            /// CPR Configuration ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> UnsubscribeByIdAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid id, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnsubscribeByIdWithHttpMessagesAsync(subscriptionId, id, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new CPR configuration and uploads certificate file to the Azure Key
            /// Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            public static CprProviderConfiguration CreateDataDistributorConfiguration(this IInternalClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string))
            {
                return operations.CreateDataDistributorConfigurationAsync(subscriptionId, name, environment, certificate, certificatePassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new CPR configuration and uploads certificate file to the Azure Key
            /// Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CprProviderConfiguration> CreateDataDistributorConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataDistributorConfigurationWithHttpMessagesAsync(subscriptionId, name, environment, certificate, certificatePassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or updates existing cpr configuration and uploads certificate file to
            /// the Azure Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            public static CprProviderConfiguration UpdateDataDistributorConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string))
            {
                return operations.UpdateDataDistributorConfigurationAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or updates existing cpr configuration and uploads certificate file to
            /// the Azure Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CprProviderConfiguration> UpdateDataDistributorConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataDistributorConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new CPR Experian configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ExperianProviderConfigurationResponse CreateExperianConfiguration(this IInternalClient operations, System.Guid subscriptionId, ExperianConfigurationRequest request)
            {
                return operations.CreateExperianConfigurationAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new CPR Experian configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExperianProviderConfigurationResponse> CreateExperianConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, ExperianConfigurationRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExperianConfigurationWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or updates existing Experian configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ExperianProviderConfigurationResponse UpdateExperianConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, ExperianConfigurationRequest request)
            {
                return operations.UpdateExperianConfigurationAsync(subscriptionId, configurationId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or updates existing Experian configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExperianProviderConfigurationResponse> UpdateExperianConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, ExperianConfigurationRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateExperianConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static FakeProviderConfigurationModel CreateFakeProviderConfiguration(this IInternalClient operations, System.Guid subscriptionId, string name)
            {
                return operations.CreateFakeProviderConfigurationAsync(subscriptionId, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FakeProviderConfigurationModel> CreateFakeProviderConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFakeProviderConfigurationWithHttpMessagesAsync(subscriptionId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static FakeProviderConfigurationModel UpdateFakeProviderConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name)
            {
                return operations.UpdateFakeProviderConfigurationAsync(subscriptionId, configurationId, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FakeProviderConfigurationModel> UpdateFakeProviderConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFakeProviderConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='data'>
            /// </param>
            public static FakeProviderConfigurationModel SaveData(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, Stream data = default(Stream))
            {
                return operations.SaveDataAsync(subscriptionId, configurationId, data).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='data'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FakeProviderConfigurationModel> SaveDataAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, Stream data = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveDataWithHttpMessagesAsync(subscriptionId, configurationId, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='serviceAgreementUuid'>
            /// </param>
            /// <param name='userSystemUuid'>
            /// </param>
            /// <param name='userUuid'>
            /// All supported UserUuids can be fetched using '/municipalities' endpoint.
            /// </param>
            public static ServicePlatformProviderConfiguration CreateServicePlatformConfiguration(this IInternalClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string))
            {
                return operations.CreateServicePlatformConfigurationAsync(subscriptionId, name, environment, certificate, certificatePassword, serviceAgreementUuid, userSystemUuid, userUuid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='serviceAgreementUuid'>
            /// </param>
            /// <param name='userSystemUuid'>
            /// </param>
            /// <param name='userUuid'>
            /// All supported UserUuids can be fetched using '/municipalities' endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServicePlatformProviderConfiguration> CreateServicePlatformConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateServicePlatformConfigurationWithHttpMessagesAsync(subscriptionId, name, environment, certificate, certificatePassword, serviceAgreementUuid, userSystemUuid, userUuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='serviceAgreementUuid'>
            /// </param>
            /// <param name='userSystemUuid'>
            /// </param>
            /// <param name='userUuid'>
            /// All supported UserUuids can be fetched using '/municipalities' endpoint.
            /// </param>
            public static ServicePlatformProviderConfiguration UpdateServicePlatformConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string))
            {
                return operations.UpdateServicePlatformConfigurationAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword, serviceAgreementUuid, userSystemUuid, userUuid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='serviceAgreementUuid'>
            /// </param>
            /// <param name='userSystemUuid'>
            /// </param>
            /// <param name='userUuid'>
            /// All supported UserUuids can be fetched using '/municipalities' endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServicePlatformProviderConfiguration> UpdateServicePlatformConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateServicePlatformConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword, serviceAgreementUuid, userSystemUuid, userUuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
